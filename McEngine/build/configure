#!/usr/bin/env python3

import ninja_syntax, os

ninja = ninja_syntax.Writer(open("build.ninja", "w"))

CC = "clang"
CXX = "clang++"
LD = "clang++"

CFLAGS = ["-std=c11"]
CXXFLAGS = ["-std=c++11", "-Wno-switch"]
CPPFLAGS = ["-D_GNU_SOURCE"]
LDFLAGS = ["-L."]

for library in os.listdir("../libraries"):
    CPPFLAGS.append(f"-I../libraries/{library}/include")
    if library == "glew":
        CPPFLAGS.append(f"-I../libraries/{library}/include/GL")
    LDFLAGS.append(f"-L../libraries/{library}/lib/linux")

LDFLAGS += [
    "-lz",
    "-ldiscord-rpc",
    "-lsteam_api",
    "-lcurl",
    "-lX11",
    "-lXi",
    "-lGL",
    "-lGLU",
    "-lGLEW",
    "-lfreetype",
    "-lbass",
    "-lbass_fx",
    "-lOpenCL",
    "-lBulletSoftBody",
    "-lBulletDynamics",
    "-lBulletCollision",
    "-lLinearMath",
    "-lenet",
    "-lpthread",
    "-ljpeg",
]

c_src = []
cxx_src = []
inc = []

for dir, dir_names, file_names in os.walk("../src", followlinks=True):
    for dir_name in dir_names:
        full = os.path.join(dir[3:], dir_name)
        inc.append(full)
    for file_name in file_names:
        full = os.path.join(dir[3:], file_name)
        ext = os.path.splitext(file_name)[1]
        if ext == ".cpp":
            cxx_src.append(full)
        elif ext == ".c":
            c_src.append(full)

for file_name in inc:
    CPPFLAGS.append(f"-I../{file_name}")

def compiler(language, binary, flags):
    ninja.rule(
        name=language,
        command=f"{binary} -MD -MQ $out -MF $out.d {flags} -o $out $in",
        description=f"Building {language.upper()} file $in",
        depfile="$out.d",
        deps="gcc",
    )

def file(language, file):
    ninja.build(
        outputs=f"{file}.o",
        rule=language,
        inputs=f"../{file}",
    )

ninja.variable("cflags", CFLAGS)
ninja.variable("cxxflags", CXXFLAGS)
ninja.variable("cppflags", CPPFLAGS)
ninja.variable("ldflags", LDFLAGS)

for language, compiler, flags in [("c", CC, "$cflags"), ("cxx", CXX, "$cxxflags")]:
    ninja.rule(
        name=language,
        command=f"{compiler} -MD -MQ $out -MF $out.d $cppflags {flags} -o $out -c $in",
        description=f"Compiling $in",
        depfile="$out.d",
        deps="gcc",
    )

ninja.rule(
    name="ld",
    command=f"{LD} $ldflags -o $out $in",
    description="Linking $out",
)

for file_name in c_src:
    file("c", file_name)

for file_name in cxx_src:
    file("cxx", file_name)

ninja.build(
    outputs="McEngine",
    rule="ld",
    inputs=[f"{x}.o" for x in c_src + cxx_src],
)
